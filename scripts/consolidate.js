const JSBI = require('jsbi');
const utils = require('ethereumjs-util');
const ethers = require('ethers');
const { Tx, helpers, Input, Output, Outpoint } = require('leap-core');
const Web3 = require('web3');

const CONFIG = {
  //dryRun: JSON.parse(process.env.DRY_RUN) || false, //Tells you what it would do without actually sending any txs
  provider: 'https://testnet-node.leapdao.org',
  tokenColor: parseInt(process.env.COLOR) || 0,
  utxoNum: parseInt(process.env.UTXO_NUM) || 20, //Number of UTXOs to keep
  //contract_bak: "0x7e0d9c560471f773dc3949bcc116bb6abec8dc0d", //contract address
  //Air
  //script: "608060405234801561001057600080fd5b50600436106100445760e060020a60003504630aef446d8114610049578063c521fbac14610087578063f7c5823e1461012b575b600080fd5b6100856004803603608081101561005f57600080fd5b50803590600160a060020a036020820135811691604081013591606090910135166101e4565b005b6100856004803603602081101561009d57600080fd5b810190602081018135602060020a8111156100b757600080fd5b8201836020820111156100c957600080fd5b803590602001918460018302840111602060020a831117156100ea57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610497945050505050565b6100856004803603606081101561014157600080fd5b813591600160a060020a0360208201351691810190606081016040820135602060020a81111561017057600080fd5b82018360208201111561018257600080fd5b803590602001918460018302840111602060020a831117156101a357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610637945050505050565b6000839050600081600160a060020a0316636352211e856040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561023257600080fd5b505afa158015610246573d6000803e3d6000fd5b505050506040513d602081101561025c57600080fd5b50516040805160e060020a6323b872dd028152600160a060020a0383166004820152306024820152604481018990529051919250731f89fb2199220a350287b162b9d0a330a2d2efad9182916323b872dd9160648083019260209291908290030181600087803b1580156102cf57600080fd5b505af11580156102e3573d6000803e3d6000fd5b505050506040513d60208110156102f957600080fd5b50506040805160e060020a6337ebbc03028152600481018790529051600091600160a060020a038616916337ebbc0391602480820192602092909190829003018186803b15801561034957600080fd5b505afa15801561035d573d6000803e3d6000fd5b505050506040513d602081101561037357600080fd5b50519050600160a060020a03841663a983d43f8761039d8466038d7ea4c6800060108e0204610766565b6040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050600060405180830381600087803b1580156103dd57600080fd5b505af11580156103f1573d6000803e3d6000fd5b50506040805160e060020a63a9059cbb028152600160a060020a038916600482015260108c026024820152905173f64ffbc4a69631d327590f4151b79816a193a8c6935083925063a9059cbb916044808201926020929091908290030181600087803b15801561046057600080fd5b505af1158015610474573d6000803e3d6000fd5b505050506040513d602081101561048a57600080fd5b5050505050505050505050565b60006104b96001606060020a0319606060020a3002168363ffffffff6107f216565b9050600160a060020a03811673af0939af286a35dbfab7ded7c777a5f6e8be26a81461052a576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a6370a08231028152306004820152905173f64ffbc4a69631d327590f4151b79816a193a8c69160009183916370a08231916024808301926020929190829003018186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d60208110156105ad57600080fd5b50516040805160e060020a63a9059cbb028152306004820152602481018390529051919250600160a060020a0384169163a9059cbb916044808201926020929091908290030181600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b505050506040513d602081101561062f57600080fd5b505050505050565b60006106596001606060020a0319606060020a3002168363ffffffff6107f216565b9050600160a060020a03811673af0939af286a35dbfab7ded7c777a5f6e8be26a8146106ca576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a63a9059cbb028152600160a060020a038516600482015260248101869052905173f64ffbc4a69631d327590f4151b79816a193a8c691829163a9059cbb916044808201926020929091908290030181600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b505050506040513d602081101561075d57600080fd5b50505050505050565b600080610772846108ca565b905082810163ffffffff808316908216116107cc576040805160e560020a62461bcd02815260206004820152600f6024820152608860020a6e627566666572206f766572666c6f7702604482015290519081900360640190fd5b602060020a63ffffffff9091160267ffffffff0000000019909416939093179392505050565b6000806000808451604114151561080f57600093505050506108c4565b50505060208201516040830151606084015160001a601b60ff8216101561083457601b015b8060ff16601b1415801561084c57508060ff16601c14155b1561085d57600093505050506108c4565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156108b4573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b602060020a90049056fea165627a7a723058209d34e4bafbee36beed8190a243c2c952d1f0a199b59d02faa7de6caddcb761690029", //contract script
  //Earth
  script: "608060405234801561001057600080fd5b50600436106100445760e060020a600035046394d615b58114610049578063d43491371461007d578063f67fcc4c14610144575b600080fd5b61007b6004803603608081101561005f57600080fd5b5080359060ff6020820135169060408101359060600135610170565b005b61007b600480360360c081101561009357600080fd5b813591602081013591810190606081016040820135602060020a8111156100b957600080fd5b8201836020820111156100cb57600080fd5b803590602001918460018302840111602060020a831117156100ec57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050600160a060020a036020830135811692604001351690506102eb565b61007b6004803603606081101561015a57600080fd5b5060ff8135169060208101359060400135610b3d565b604080516000815260208082018084523060a060020a890217905260ff8616828401526060820185905260808201849052915173af0939af286a35dbfab7ded7c777a5f6e8be26a89260019260a081810193601f1981019281900390910190855afa1580156101e3573d6000803e3d6000fd5b50505060206040510351600160a060020a0316141515610248576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a63a9059cbb028152735380fb2ed21580964191856479c2761c1eabe14f600482015260248101869052905173f64ffbc4a69631d327590f4151b79816a193a8c69163a9059cbb9160448083019260209291908290030181600087803b1580156102b957600080fd5b505af11580156102cd573d6000803e3d6000fd5b505050506040513d60208110156102e357600080fd5b505050505050565b81816102f5610d67565b604080516080810180835260e160020a6331a9108f029052608481018b905290518190600160a060020a03861690636352211e9060a480850191602091818703018186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d602081101561037057600080fd5b5051600160a060020a03908116825260006020838101919091526040805160e060020a6337ebbc03028152600481018f905281519190940193928816926337ebbc03926024808301939192829003018186803b1580156103cf57600080fd5b505afa1580156103e3573d6000803e3d6000fd5b505050506040513d60208110156103f957600080fd5b505181526000602090910152905061040f610d67565b604080516080810180835260e160020a6331a9108f0290526084810189905290518190600160a060020a03861690636352211e9060a480850191602091818703018186803b15801561046057600080fd5b505afa158015610474573d6000803e3d6000fd5b505050506040513d602081101561048a57600080fd5b5051600160a060020a03908116825260006020838101919091526040805160e060020a6337ebbc03028152600481018d905281519190940193928816926337ebbc03926024808301939192829003018186803b1580156104e957600080fd5b505afa1580156104fd573d6000803e3d6000fd5b505050506040513d602081101561051357600080fd5b50518152600060209091015280518351919250600160a060020a0390811691161415610589576040805160e560020a62461bcd02815260206004820152601a60248201527f63616e206e6f742074726164652077697468206f6e6573656c66000000000000604482015290519081900360640190fd5b6040820151731f89fb2199220a350287b162b9d0a330a2d2efad9073f64ffbc4a69631d327590f4151b79816a193a8c6908b0363ffffffff166000811161060b576040805160e560020a62461bcd02815260206004820152600b602482015260a860020a6a656d70747920747261646502604482015290519081900360640190fd5b66038d7ea4c6800081026060860181905268015af1d78b58c400001015610672576040805160e560020a62461bcd0281526020600482015260106024820152608160020a6f34b73b30b634b21032b6b4b9b9b4b7b702604482015290519081900360640190fd5b6040850151602060020a90819004908d040360008111156106e957600181146106db576040805160e560020a62461bcd0281526020600482015260106024820152608260020a6f1a5b98dbdc9c9958dd081cda59db985b02604482015290519081900360640190fd5b606482600160208901520491505b87600160a060020a03166336c9c4578f8f8f6040518463ffffffff1660e060020a0281526004018084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561075657818101518382015260200161073e565b50505050905090810190601f1680156107835780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156107a457600080fd5b505af11580156107b8573d6000803e3d6000fd5b505086516040805160e160020a636eb1769f028152600160a060020a039283166004820152306024820152905160009450918816925063dd62ed3e916044808301926020929190829003018186803b15801561081357600080fd5b505afa158015610827573d6000803e3d6000fd5b505050506040513d602081101561083d57600080fd5b50511160208681019190915286015180610858575084602001515b6108625781610867565b606482025b60608601819052604080870151815160e060020a63a983d43f028152600481018f90529201602483015251600160a060020a0389169163a983d43f91604480830192600092919082900301818387803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b50505060608601805166038d7ea4c68000908102909152600060408901528751930292600160a060020a038616915063a9059cbb90610917858a8a610cf6565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561096957600080fd5b505af115801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b50508451600160a060020a0385169063a9059cbb906109b385898b610cf6565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050506040513d6020811015610a2f57600080fd5b5050606080860151908701516040805160e060020a63a9059cbb028152735380fb2ed21580964191856479c2761c1eabe14f60048201529190920160248201529051600160a060020a0385169163a9059cbb9160448083019260209291908290030181600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b505050506040513d6020811015610acd57600080fd5b50508451865160208089015181890151604080519215158352901515928201929092528151600160a060020a0394851694909316927f2d476ce15822194d3b3e6deb5bb7edd748b0f8ac84d26685f9d2991220c40b4f929181900390910190a35050505050505050505050505050565b604080516000815260208082018084526001606060020a0319606060020a300216905260ff8616828401526060820185905260808201849052915173af0939af286a35dbfab7ded7c777a5f6e8be26a89260019260a080820193601f1981019281900390910190855afa158015610bb8573d6000803e3d6000fd5b50505060206040510351600160a060020a0316141515610c1d576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a6370a082310281523060048201819052915173f64ffbc4a69631d327590f4151b79816a193a8c692839263a9059cbb9284916370a08231916024808301926020929190829003018186803b158015610c7d57600080fd5b505afa158015610c91573d6000803e3d6000fd5b505050506040513d6020811015610ca757600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156102b957600080fd5b6000839050816060015183606001511115610d115750600a83025b816060015183606001511415610d5c578383606001511415610d335750600383025b816020015115158360200151151514158015610d5157506040830151155b15610d5c5750600a83025b606490049392505050565b6040805160808101825260008082526020820181905291810182905260608101919091529056fea165627a7a7230582045acdfa046cac7bf4eb016df32330a89a6dd5f09bd3e9ee86579a32cbfc31fbb0029", //contract script
  masterPriv: '0xf368cc076d178ee5fe20a569cfda94f28d1fdaf0fc7d4b64ff92b66ddbdb2641'
};

const rpc = new ethers.providers.JsonRpcProvider(CONFIG.provider);
const contract = `0x${utils.ripemd160(Buffer.from(CONFIG.script, 'hex')).toString('hex')}`;

async function getUtxos(address, color, rpc) {
    const utxos = (await rpc.send('plasma_unspent', [address]))
    .filter(utxo => 
      utxo.output.color === color  
    ).map(utxo => ({
      outpoint: Outpoint.fromRaw(utxo.outpoint),
      output: Output.fromJSON(utxo.output),
    }));

    return utxos;
}

async function getBalance(address, color, rpc) {
    const response = await rpc.send('plasma_unspent', [address]);
    const balance = response.reduce((sum, unspent) => { 
        return (unspent.output.color === color) ? JSBI.add(sum, JSBI.BigInt(unspent.output.value)) : sum}, JSBI.BigInt(0));

    return balance;
}

function formTx(inputs, outputs, priv){
    const condition = Tx.spendCond(
        inputs,
        outputs
      );
    
    const sig = condition.getConditionSig(priv);
    const msgData = `0xf67fcc4c00000000000000000000000000000000000000000000000000000000000000${sig.v.toString(16)}${sig.r.toString('hex')}${sig.s.toString('hex')}`;
    condition.inputs[0].setMsgData(msgData);

    return condition;
}

async function consolidate(address, utxos, script, priv, rpc, dryRun=false) {
    const GAS_COST = JSBI.BigInt(0);
      
    const gasBalance = await getBalance(address, 0, rpc);
    if (gasBalance < GAS_COST) throw new Error (`Not enough gas for breeding. Need: ${GAS_COST}, balance: ${gasBalance}`);
    const gasUtxos = await getUtxos(address, 0, rpc);
    const gasUtxo = gasUtxos[0];
    
    //Gas cost debug:
    //console.log(String(gasUtxo.output.value));
    //console.log(String(GAS_COST));
    //console.log(String(JSBI.subtract(gasUtxo.output.value, GAS_COST)));
    let inputs = [];
    let amount = JSBI.BigInt(0);
    
    const gasInput = new Input({
        prevout: gasUtxo.outpoint,
        script,
    });
    inputs.push(gasInput);

    for (let i = 0; i < utxos.length; i++) {
        inputs.push(new Input({
            prevout: utxos[i].outpoint
        }));
        amount = JSBI.add(amount, utxos[i].output.value);
    }
    console.log(String(amount));
    const consolidateOutput = new Output(amount,address,utxos[0].output.color);
    const gasOutput = new Output(JSBI.subtract(gasUtxo.output.value, GAS_COST), address, 0);

    let condition = formTx(
        inputs, 
        [consolidateOutput, gasOutput], 
        priv
    );
  
    let rsp = await rpc.send('checkSpendingCondition', [condition.hex()]);
    //If gas price is not correct try to recreate with correct price
    if (rsp.error && rsp.error !== '[object Object]' && rsp.error.split("\"").slice(-4)[0] != String(GAS_COST)) {
        console.log('Adjusting gas price');
        condition = formTx(
            inputs, 
            [consolidateOutput, new Output(JSBI.BigInt(rsp.error.split("\"").slice(-4)[0]), address, 0)], 
            priv
        );
        rsp = await wallet.provider.send('checkSpendingCondition', [condition.hex()]);
    }
    if (dryRun) return rsp.error ? rsp.error : 'Check passed'; //Do not send transaction in dry run mode
    if (rsp.error) console.log(JSON.stringify(rsp.error));
  
    const txHash = await wallet.provider.send('eth_sendRawTransaction', [condition.hex()]);
    console.log('txHash:', txHash);

    return txHash;
}

async function main () {
    console.log("Contract address:", contract);
    const utxos = await getUtxos(contract, CONFIG.tokenColor, rpc);
    console.log("Number of UTXOs:", utxos.length);
    console.log(await consolidate(contract, utxos.slice(0,10), CONFIG.script, CONFIG.masterPriv, rpc, CONFIG.dryRun));
}

main();